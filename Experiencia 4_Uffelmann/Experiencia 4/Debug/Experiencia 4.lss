
Experiencia 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000850  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000694  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000524  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000534  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdbool.h>

bool leerBoton (int puerto, int pin);

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2e 97       	sbiw	r28, 0x0e	; 14
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11111111;	// PB1 al PB4 para decodificador. LED integrado en PB5.
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b110000;	// P1 en PC0, Z1 en PC1, Z2 en PC2, Z3 en PC3, Relé en PC4
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	97 b9       	out	0x07, r25	; 7
	DDRD = 0b11111111;	// Q1 en PD1, Q2 en PD2, Q3 en PD3
  9c:	8a b9       	out	0x0a, r24	; 10
	int flagDisplay = 1;
	int MSD, LSD;
	int cuentaRegAlarma = 0;
	
	bool alarmaActivada = false;		// Por defecto, alarma desactivada.
	bool alarmaDisparada = false;		// Por defecto, alarma no disparada.
  9e:	21 2c       	mov	r2, r1
	int Z1detecta = 0, Z2detecta = 0, Z3detecta = 0;
	int flagDisplay = 1;
	int MSD, LSD;
	int cuentaRegAlarma = 0;
	
	bool alarmaActivada = false;		// Por defecto, alarma desactivada.
  a0:	31 2c       	mov	r3, r1
	int BZ2_act = 1, BZ2_ant = 1, flag_BZ2 = 1;
	int BZ3_act = 1, BZ3_ant = 1, flag_BZ3 = 1;
	int Z1detecta = 0, Z2detecta = 0, Z3detecta = 0;
	int flagDisplay = 1;
	int MSD, LSD;
	int cuentaRegAlarma = 0;
  a2:	81 2c       	mov	r8, r1
  a4:	91 2c       	mov	r9, r1
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
	int BZ1_act = 1, BZ1_ant = 1;
	int BZ2_act = 1, BZ2_ant = 1, flag_BZ2 = 1;
	int BZ3_act = 1, BZ3_ant = 1, flag_BZ3 = 1;
	int Z1detecta = 0, Z2detecta = 0, Z3detecta = 0;
	int flagDisplay = 1;
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	5a 87       	std	Y+10, r21	; 0x0a
  ac:	49 87       	std	Y+9, r20	; 0x09
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
	int BZ1_act = 1, BZ1_ant = 1;
	int BZ2_act = 1, BZ2_ant = 1, flag_BZ2 = 1;
	int BZ3_act = 1, BZ3_ant = 1, flag_BZ3 = 1;
	int Z1detecta = 0, Z2detecta = 0, Z3detecta = 0;
  ae:	1a 82       	std	Y+2, r1	; 0x02
  b0:	19 82       	std	Y+1, r1	; 0x01
	unsigned int cont = 15000;
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
	int BZ1_act = 1, BZ1_ant = 1;
	int BZ2_act = 1, BZ2_ant = 1, flag_BZ2 = 1;
	int BZ3_act = 1, BZ3_ant = 1, flag_BZ3 = 1;
  b2:	58 87       	std	Y+8, r21	; 0x08
  b4:	4f 83       	std	Y+7, r20	; 0x07
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0

	unsigned int cont = 15000;
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
	int BZ1_act = 1, BZ1_ant = 1;
	int BZ2_act = 1, BZ2_ant = 1, flag_BZ2 = 1;
  ba:	5e 83       	std	Y+6, r21	; 0x06
  bc:	4d 83       	std	Y+5, r20	; 0x05
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0b11111111;	// Q1 en PD1, Q2 en PD2, Q3 en PD3

	unsigned int cont = 15000;
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
	int BZ1_act = 1, BZ1_ant = 1;
  c2:	e1 e0       	ldi	r30, 0x01	; 1
  c4:	f0 e0       	ldi	r31, 0x00	; 0
	DDRC = 0b110000;	// P1 en PC0, Z1 en PC1, Z2 en PC2, Z3 en PC3, Relé en PC4
	DDRD = 0b11111111;	// Q1 en PD1, Q2 en PD2, Q3 en PD3

	unsigned int cont = 15000;
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
	int BP1_act = 1, BP1_ant = 1, flag_BP1 = 1;
  c6:	5c 83       	std	Y+4, r21	; 0x04
  c8:	4b 83       	std	Y+3, r20	; 0x03
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	70 e0       	ldi	r23, 0x00	; 0
	DDRB = 0b11111111;	// PB1 al PB4 para decodificador. LED integrado en PB5.
	DDRC = 0b110000;	// P1 en PC0, Z1 en PC1, Z2 en PC2, Z3 en PC3, Relé en PC4
	DDRD = 0b11111111;	// Q1 en PD1, Q2 en PD2, Q3 en PD3

	unsigned int cont = 15000;
	unsigned int cuentaReg = 0;		// Cuenta regresiva del tiempo de 15 a 0 segundos, mostrado cuando la alarma está activada y se detecta presencia en Z1.
  ce:	a1 2c       	mov	r10, r1
  d0:	b1 2c       	mov	r11, r1
{
	DDRB = 0b11111111;	// PB1 al PB4 para decodificador. LED integrado en PB5.
	DDRC = 0b110000;	// P1 en PC0, Z1 en PC1, Z2 en PC2, Z3 en PC3, Relé en PC4
	DDRD = 0b11111111;	// Q1 en PD1, Q2 en PD2, Q3 en PD3

	unsigned int cont = 15000;
  d2:	0f 2e       	mov	r0, r31
  d4:	f8 e9       	ldi	r31, 0x98	; 152
  d6:	4f 2e       	mov	r4, r31
  d8:	fa e3       	ldi	r31, 0x3A	; 58
  da:	5f 2e       	mov	r5, r31
  dc:	f0 2d       	mov	r31, r0
	bool alarmaActivada = false;		// Por defecto, alarma desactivada.
	bool alarmaDisparada = false;		// Por defecto, alarma no disparada.
	
    while (1) {
		// Botón P1 -- ON-OFF alarma
		BP1_act = is_high(PINC,P1);
  de:	46 b1       	in	r20, 0x06	; 6
  e0:	51 e0       	ldi	r21, 0x01	; 1
  e2:	40 fb       	bst	r20, 0
  e4:	66 24       	eor	r6, r6
  e6:	60 f8       	bld	r6, 0
  e8:	71 2c       	mov	r7, r1
  ea:	40 ff       	sbrs	r20, 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	c5 2e       	mov	r12, r21
  f0:	d1 2c       	mov	r13, r1
		if(BP1_act && BP1_ant)	{
  f2:	61 14       	cp	r6, r1
  f4:	71 04       	cpc	r7, r1
  f6:	69 f0       	breq	.+26     	; 0x112 <main+0x92>
  f8:	61 15       	cp	r22, r1
  fa:	71 05       	cpc	r23, r1
  fc:	51 f0       	breq	.+20     	; 0x112 <main+0x92>
			flag_BP1 = 1;
			cbi(PORTD, Q1);		// Si no se detecta nada en Z1, mantener displays apagados ?
  fe:	4b b1       	in	r20, 0x0b	; 11
 100:	4d 7f       	andi	r20, 0xFD	; 253
 102:	4b b9       	out	0x0b, r20	; 11
			cbi(PORTD, Q2);
 104:	4b b1       	in	r20, 0x0b	; 11
 106:	4b 7f       	andi	r20, 0xFB	; 251
 108:	4b b9       	out	0x0b, r20	; 11
	
    while (1) {
		// Botón P1 -- ON-OFF alarma
		BP1_act = is_high(PINC,P1);
		if(BP1_act && BP1_ant)	{
			flag_BP1 = 1;
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	5c 83       	std	Y+4, r21	; 0x04
 110:	4b 83       	std	Y+3, r20	; 0x03
			cbi(PORTD, Q1);		// Si no se detecta nada en Z1, mantener displays apagados ?
			cbi(PORTD, Q2);
		}
		if(!BP1_act && !BP1_ant && flag_BP1){
 112:	67 28       	or	r6, r7
 114:	61 f4       	brne	.+24     	; 0x12e <main+0xae>
 116:	67 2b       	or	r22, r23
 118:	51 f4       	brne	.+20     	; 0x12e <main+0xae>
 11a:	4b 81       	ldd	r20, Y+3	; 0x03
 11c:	5c 81       	ldd	r21, Y+4	; 0x04
 11e:	45 2b       	or	r20, r21
 120:	31 f0       	breq	.+12     	; 0x12e <main+0xae>
			alarmaActivada = !alarmaActivada;
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	34 26       	eor	r3, r20
			cont = 0;
			flag_BP1 = 0;
 126:	1c 82       	std	Y+4, r1	; 0x04
 128:	1b 82       	std	Y+3, r1	; 0x03
			cbi(PORTD, Q1);		// Si no se detecta nada en Z1, mantener displays apagados ?
			cbi(PORTD, Q2);
		}
		if(!BP1_act && !BP1_ant && flag_BP1){
			alarmaActivada = !alarmaActivada;
			cont = 0;
 12a:	41 2c       	mov	r4, r1
 12c:	51 2c       	mov	r5, r1
			flag_BP1 = 0;
		}
		BP1_ant = BP1_act;
		
 		// Detección de Zona 1
		BZ1_act = is_high(PINC, Z1);
 12e:	46 b1       	in	r20, 0x06	; 6
 130:	51 e0       	ldi	r21, 0x01	; 1
 132:	64 2f       	mov	r22, r20
 134:	62 70       	andi	r22, 0x02	; 2
 136:	41 ff       	sbrs	r20, 1
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	05 2f       	mov	r16, r21
 13c:	10 e0       	ldi	r17, 0x00	; 0
		if(!BZ1_act && !BZ1_ant){
 13e:	61 11       	cpse	r22, r1
 140:	0a c0       	rjmp	.+20     	; 0x156 <main+0xd6>
 142:	ef 2b       	or	r30, r31
 144:	89 f4       	brne	.+34     	; 0x168 <main+0xe8>
			// Ingresó un intruso por la zona 1. Empezar conteo.
			cont -= 10;
 146:	5a e0       	ldi	r21, 0x0A	; 10
 148:	45 1a       	sub	r4, r21
 14a:	51 08       	sbc	r5, r1
			Z1detecta = 1;
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	5e 87       	std	Y+14, r21	; 0x0e
 152:	4d 87       	std	Y+13, r20	; 0x0d
 154:	11 c0       	rjmp	.+34     	; 0x178 <main+0xf8>
		} else {
			cont = 15000;
			Z1detecta = 0;
 156:	1e 86       	std	Y+14, r1	; 0x0e
 158:	1d 86       	std	Y+13, r1	; 0x0d
		if(!BZ1_act && !BZ1_ant){
			// Ingresó un intruso por la zona 1. Empezar conteo.
			cont -= 10;
			Z1detecta = 1;
		} else {
			cont = 15000;
 15a:	0f 2e       	mov	r0, r31
 15c:	f8 e9       	ldi	r31, 0x98	; 152
 15e:	4f 2e       	mov	r4, r31
 160:	fa e3       	ldi	r31, 0x3A	; 58
 162:	5f 2e       	mov	r5, r31
 164:	f0 2d       	mov	r31, r0
 166:	08 c0       	rjmp	.+16     	; 0x178 <main+0xf8>
			Z1detecta = 0;
 168:	1e 86       	std	Y+14, r1	; 0x0e
 16a:	1d 86       	std	Y+13, r1	; 0x0d
		if(!BZ1_act && !BZ1_ant){
			// Ingresó un intruso por la zona 1. Empezar conteo.
			cont -= 10;
			Z1detecta = 1;
		} else {
			cont = 15000;
 16c:	0f 2e       	mov	r0, r31
 16e:	f8 e9       	ldi	r31, 0x98	; 152
 170:	4f 2e       	mov	r4, r31
 172:	fa e3       	ldi	r31, 0x3A	; 58
 174:	5f 2e       	mov	r5, r31
 176:	f0 2d       	mov	r31, r0
			Z1detecta = 0;
		}
		BZ1_ant = BZ1_act;
		
		// Detección en Zona 2
		BZ2_act = is_high(PINC, Z2);
 178:	46 b1       	in	r20, 0x06	; 6
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	54 2f       	mov	r21, r20
 17e:	54 70       	andi	r21, 0x04	; 4
 180:	42 ff       	sbrs	r20, 2
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	e6 2e       	mov	r14, r22
 186:	f1 2c       	mov	r15, r1
		if(BZ2_ant && BZ2_act)	flag_BZ2 = 1;
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	31 f0       	breq	.+12     	; 0x198 <main+0x118>
 18c:	55 23       	and	r21, r21
 18e:	21 f0       	breq	.+8      	; 0x198 <main+0x118>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	7e 83       	std	Y+6, r23	; 0x06
 196:	6d 83       	std	Y+5, r22	; 0x05
		if(!BZ2_act && !BZ2_ant) {
 198:	51 11       	cpse	r21, r1
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <main+0x12e>
 19c:	89 2b       	or	r24, r25
 19e:	51 f4       	brne	.+20     	; 0x1b4 <main+0x134>
			Z2detecta = 1;
			if(flag_BZ2) {
 1a0:	4d 81       	ldd	r20, Y+5	; 0x05
 1a2:	5e 81       	ldd	r21, Y+6	; 0x06
 1a4:	45 2b       	or	r20, r21
 1a6:	49 f4       	brne	.+18     	; 0x1ba <main+0x13a>
		
		// Detección en Zona 2
		BZ2_act = is_high(PINC, Z2);
		if(BZ2_ant && BZ2_act)	flag_BZ2 = 1;
		if(!BZ2_act && !BZ2_ant) {
			Z2detecta = 1;
 1a8:	e1 e0       	ldi	r30, 0x01	; 1
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <main+0x146>
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
				flag_BZ2 = 0;	
			}
		} else {
			Z2detecta = 0;
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <main+0x146>
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <main+0x146>
		
		// Detección en Zona 2
		BZ2_act = is_high(PINC, Z2);
		if(BZ2_ant && BZ2_act)	flag_BZ2 = 1;
		if(!BZ2_act && !BZ2_ant) {
			Z2detecta = 1;
 1ba:	e1 e0       	ldi	r30, 0x01	; 1
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
			if(flag_BZ2) {
				// Ingresó un intruso por la zona 2. Disparar alarma.
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
				flag_BZ2 = 0;	
 1be:	1e 82       	std	Y+6, r1	; 0x06
 1c0:	1d 82       	std	Y+5, r1	; 0x05
		if(!BZ2_act && !BZ2_ant) {
			Z2detecta = 1;
			if(flag_BZ2) {
				// Ingresó un intruso por la zona 2. Disparar alarma.
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
 1c2:	a1 2c       	mov	r10, r1
 1c4:	b1 2c       	mov	r11, r1
			Z2detecta = 0;
		}
		BZ2_ant = BZ2_act;
		
		// Detección en Zona 3
		BZ3_act = is_high(PINC, Z3);
 1c6:	86 b1       	in	r24, 0x06	; 6
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	98 2f       	mov	r25, r24
 1cc:	98 70       	andi	r25, 0x08	; 8
 1ce:	83 ff       	sbrs	r24, 3
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
		if(BZ3_ant && BZ3_act)	flag_BZ3 = 1;
 1d4:	21 15       	cp	r18, r1
 1d6:	31 05       	cpc	r19, r1
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <main+0x166>
 1da:	99 23       	and	r25, r25
 1dc:	21 f0       	breq	.+8      	; 0x1e6 <main+0x166>
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	78 87       	std	Y+8, r23	; 0x08
 1e4:	6f 83       	std	Y+7, r22	; 0x07
		if(!BZ3_act && !BZ3_ant){ 
 1e6:	91 11       	cpse	r25, r1
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <main+0x178>
 1ea:	23 2b       	or	r18, r19
 1ec:	41 f4       	brne	.+16     	; 0x1fe <main+0x17e>
			if(flag_BZ3){
 1ee:	8f 81       	ldd	r24, Y+7	; 0x07
 1f0:	98 85       	ldd	r25, Y+8	; 0x08
 1f2:	89 2b       	or	r24, r25
 1f4:	39 f4       	brne	.+14     	; 0x204 <main+0x184>
 1f6:	0e c0       	rjmp	.+28     	; 0x214 <main+0x194>
				cuentaReg = 0;
				flag_BZ3 = 0;
				Z3detecta = 1;
			}
		} else {
			Z3detecta = 0;
 1f8:	1a 82       	std	Y+2, r1	; 0x02
 1fa:	19 82       	std	Y+1, r1	; 0x01
 1fc:	0b c0       	rjmp	.+22     	; 0x214 <main+0x194>
 1fe:	1a 82       	std	Y+2, r1	; 0x02
 200:	19 82       	std	Y+1, r1	; 0x01
 202:	08 c0       	rjmp	.+16     	; 0x214 <main+0x194>
			if(flag_BZ3){
				// Ingresó un intruso por la zona 3. Disparar alarma.
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
				flag_BZ3 = 0;
				Z3detecta = 1;
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	3a 83       	std	Y+2, r19	; 0x02
 20a:	29 83       	std	Y+1, r18	; 0x01
		if(!BZ3_act && !BZ3_ant){ 
			if(flag_BZ3){
				// Ingresó un intruso por la zona 3. Disparar alarma.
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
				flag_BZ3 = 0;
 20c:	18 86       	std	Y+8, r1	; 0x08
 20e:	1f 82       	std	Y+7, r1	; 0x07
		if(BZ3_ant && BZ3_act)	flag_BZ3 = 1;
		if(!BZ3_act && !BZ3_ant){ 
			if(flag_BZ3){
				// Ingresó un intruso por la zona 3. Disparar alarma.
				// alarmaDisparada = true; // Alarma activada.
				cuentaReg = 0;
 210:	a1 2c       	mov	r10, r1
 212:	b1 2c       	mov	r11, r1
		}
		BZ3_ant = BZ3_act;
		
		//	Solamente encender los displays de cuenta regresiva si la alarma está activada,
		//	y el contador  está entre 0 y 14990
		if (alarmaActivada && cont > 0 && cont < 15000) {
 214:	33 20       	and	r3, r3
 216:	09 f4       	brne	.+2      	; 0x21a <main+0x19a>
 218:	6a c0       	rjmp	.+212    	; 0x2ee <main+0x26e>
 21a:	41 14       	cp	r4, r1
 21c:	51 04       	cpc	r5, r1
 21e:	09 f4       	brne	.+2      	; 0x222 <main+0x1a2>
 220:	66 c0       	rjmp	.+204    	; 0x2ee <main+0x26e>
 222:	38 e9       	ldi	r19, 0x98	; 152
 224:	43 16       	cp	r4, r19
 226:	3a e3       	ldi	r19, 0x3A	; 58
 228:	53 06       	cpc	r5, r19
 22a:	08 f0       	brcs	.+2      	; 0x22e <main+0x1ae>
 22c:	60 c0       	rjmp	.+192    	; 0x2ee <main+0x26e>
			// Escritura multiplexada en displays
			cuentaReg = cont / 1000;	// Paso de ms a s.
 22e:	92 01       	movw	r18, r4
 230:	36 95       	lsr	r19
 232:	27 95       	ror	r18
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	a5 ec       	ldi	r26, 0xC5	; 197
 23e:	b0 e2       	ldi	r27, 0x20	; 32
 240:	0e 94 ef 01 	call	0x3de	; 0x3de <__umulhisi3>
 244:	5c 01       	movw	r10, r24
 246:	b6 94       	lsr	r11
 248:	a7 94       	ror	r10
 24a:	b6 94       	lsr	r11
 24c:	a7 94       	ror	r10
 24e:	b6 94       	lsr	r11
 250:	a7 94       	ror	r10
 252:	b6 94       	lsr	r11
 254:	a7 94       	ror	r10
			MSD = cuentaReg / 10;	// Extraer el dígito más significativo (decena)
 256:	92 01       	movw	r18, r4
 258:	32 95       	swap	r19
 25a:	22 95       	swap	r18
 25c:	2f 70       	andi	r18, 0x0F	; 15
 25e:	23 27       	eor	r18, r19
 260:	3f 70       	andi	r19, 0x0F	; 15
 262:	23 27       	eor	r18, r19
 264:	a7 e4       	ldi	r26, 0x47	; 71
 266:	b3 e0       	ldi	r27, 0x03	; 3
 268:	0e 94 ef 01 	call	0x3de	; 0x3de <__umulhisi3>
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	9c 87       	std	Y+12, r25	; 0x0c
 27a:	8b 87       	std	Y+11, r24	; 0x0b
			LSD = cuentaReg % 10;	// Extraer el dígito menos significativo (unidad)
 27c:	95 01       	movw	r18, r10
 27e:	ad ec       	ldi	r26, 0xCD	; 205
 280:	bc ec       	ldi	r27, 0xCC	; 204
 282:	0e 94 ef 01 	call	0x3de	; 0x3de <__umulhisi3>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	9c 01       	movw	r18, r24
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	b5 01       	movw	r22, r10
 2aa:	68 1b       	sub	r22, r24
 2ac:	79 0b       	sbc	r23, r25
 2ae:	cb 01       	movw	r24, r22
			// Escribir en el puerto
			flagDisplay = !flagDisplay;
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	69 85       	ldd	r22, Y+9	; 0x09
 2b4:	7a 85       	ldd	r23, Y+10	; 0x0a
 2b6:	67 2b       	or	r22, r23
 2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x23c>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
			if (flagDisplay) {
 2be:	69 85       	ldd	r22, Y+9	; 0x09
 2c0:	7a 85       	ldd	r23, Y+10	; 0x0a
 2c2:	67 2b       	or	r22, r23
 2c4:	51 f4       	brne	.+20     	; 0x2da <main+0x25a>
				cbi(PORTD, Q2);
 2c6:	9b b1       	in	r25, 0x0b	; 11
 2c8:	9b 7f       	andi	r25, 0xFB	; 251
 2ca:	9b b9       	out	0x0b, r25	; 11
				PORTB = LSD;
 2cc:	85 b9       	out	0x05, r24	; 5
				sbi(PORTD, Q1);
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	8b b9       	out	0x0b, r24	; 11
			// Escritura multiplexada en displays
			cuentaReg = cont / 1000;	// Paso de ms a s.
			MSD = cuentaReg / 10;	// Extraer el dígito más significativo (decena)
			LSD = cuentaReg % 10;	// Extraer el dígito menos significativo (unidad)
			// Escribir en el puerto
			flagDisplay = !flagDisplay;
 2d4:	3a 87       	std	Y+10, r19	; 0x0a
 2d6:	29 87       	std	Y+9, r18	; 0x09
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <main+0x26e>
			if (flagDisplay) {
				cbi(PORTD, Q2);
				PORTB = LSD;
				sbi(PORTD, Q1);
				} else {
				cbi(PORTD, Q1);
 2da:	8b b1       	in	r24, 0x0b	; 11
 2dc:	8d 7f       	andi	r24, 0xFD	; 253
 2de:	8b b9       	out	0x0b, r24	; 11
				PORTB = MSD;
 2e0:	7b 85       	ldd	r23, Y+11	; 0x0b
 2e2:	75 b9       	out	0x05, r23	; 5
				sbi(PORTD, Q2);
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	84 60       	ori	r24, 0x04	; 4
 2e8:	8b b9       	out	0x0b, r24	; 11
			// Escritura multiplexada en displays
			cuentaReg = cont / 1000;	// Paso de ms a s.
			MSD = cuentaReg / 10;	// Extraer el dígito más significativo (decena)
			LSD = cuentaReg % 10;	// Extraer el dígito menos significativo (unidad)
			// Escribir en el puerto
			flagDisplay = !flagDisplay;
 2ea:	3a 87       	std	Y+10, r19	; 0x0a
 2ec:	29 87       	std	Y+9, r18	; 0x09
				cbi(PORTD, Q1);
				PORTB = MSD;
				sbi(PORTD, Q2);
			}
		}
		if(cuentaReg == 0){ // Si la cuenta regresiva de presencia en Z1 llega a 0, disparar la alarma.
 2ee:	a1 14       	cp	r10, r1
 2f0:	b1 04       	cpc	r11, r1
 2f2:	a1 f4       	brne	.+40     	; 0x31c <main+0x29c>
			cuentaRegAlarma = 10000; // Setear en 10 segundos, pero sólo 1 vez.
			alarmaDisparada = true;
			
			cuentaReg = 15000;		// Valor para que no sea cero, y no vuelva a entrar en este if.
			cbi(PORTD, Q1);			// Apagar displays de cuenta regresiva
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	8d 7f       	andi	r24, 0xFD	; 253
 2f8:	8b b9       	out	0x0b, r24	; 11
			cbi(PORTD, Q2);
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	8b 7f       	andi	r24, 0xFB	; 251
 2fe:	8b b9       	out	0x0b, r24	; 11
				sbi(PORTD, Q2);
			}
		}
		if(cuentaReg == 0){ // Si la cuenta regresiva de presencia en Z1 llega a 0, disparar la alarma.
			cuentaRegAlarma = 10000; // Setear en 10 segundos, pero sólo 1 vez.
			alarmaDisparada = true;
 300:	22 24       	eor	r2, r2
 302:	23 94       	inc	r2
				PORTB = MSD;
				sbi(PORTD, Q2);
			}
		}
		if(cuentaReg == 0){ // Si la cuenta regresiva de presencia en Z1 llega a 0, disparar la alarma.
			cuentaRegAlarma = 10000; // Setear en 10 segundos, pero sólo 1 vez.
 304:	0f 2e       	mov	r0, r31
 306:	f0 e1       	ldi	r31, 0x10	; 16
 308:	8f 2e       	mov	r8, r31
 30a:	f7 e2       	ldi	r31, 0x27	; 39
 30c:	9f 2e       	mov	r9, r31
 30e:	f0 2d       	mov	r31, r0
			alarmaDisparada = true;
			
			cuentaReg = 15000;		// Valor para que no sea cero, y no vuelva a entrar en este if.
 310:	0f 2e       	mov	r0, r31
 312:	f8 e9       	ldi	r31, 0x98	; 152
 314:	af 2e       	mov	r10, r31
 316:	fa e3       	ldi	r31, 0x3A	; 58
 318:	bf 2e       	mov	r11, r31
 31a:	f0 2d       	mov	r31, r0
			cbi(PORTD, Q1);			// Apagar displays de cuenta regresiva
			cbi(PORTD, Q2);
		}
		
		if (cuentaRegAlarma > 0) {
 31c:	18 14       	cp	r1, r8
 31e:	19 04       	cpc	r1, r9
 320:	24 f4       	brge	.+8      	; 0x32a <main+0x2aa>
			cuentaRegAlarma -= 10;
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	88 1a       	sub	r8, r24
 326:	91 08       	sbc	r9, r1
 328:	01 c0       	rjmp	.+2      	; 0x32c <main+0x2ac>
		} else {
			// si llegó a cero, apagar alarma.
			alarmaDisparada = false;
 32a:	21 2c       	mov	r2, r1
		}
						
		if (!alarmaActivada) alarmaDisparada = false;
 32c:	31 10       	cpse	r3, r1
 32e:	01 c0       	rjmp	.+2      	; 0x332 <main+0x2b2>
 330:	21 2c       	mov	r2, r1
		if (alarmaActivada) sbi(PORTB, PB5); // Encender el LED integrado del Arduino (Pin 13) para indicar que la alarma está activada.
 332:	33 20       	and	r3, r3
 334:	21 f0       	breq	.+8      	; 0x33e <main+0x2be>
 336:	85 b1       	in	r24, 0x05	; 5
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	85 b9       	out	0x05, r24	; 5
 33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0x2c4>
		else cbi(PORTB, PB5);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	8f 7d       	andi	r24, 0xDF	; 223
 342:	85 b9       	out	0x05, r24	; 5
		
		// Activar o desactivar la alarma, según su bandera lo indique
		if(alarmaActivada && alarmaDisparada) {
 344:	33 20       	and	r3, r3
 346:	31 f0       	breq	.+12     	; 0x354 <main+0x2d4>
 348:	22 20       	and	r2, r2
 34a:	21 f0       	breq	.+8      	; 0x354 <main+0x2d4>
			sbi(PORTC, Alarma);		// Encender LED y buzzer alarma
 34c:	88 b1       	in	r24, 0x08	; 8
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	88 b9       	out	0x08, r24	; 8
 352:	03 c0       	rjmp	.+6      	; 0x35a <main+0x2da>
		} else {
			cbi(PORTC, Alarma);		// Apagar LED y buzzer alarma
 354:	88 b1       	in	r24, 0x08	; 8
 356:	8f 7e       	andi	r24, 0xEF	; 239
 358:	88 b9       	out	0x08, r24	; 8
		}
		
		// Lógica para mostrar el número de zona en display 3 (el de la izquierda).
		
		if (!alarmaActivada) {
 35a:	31 10       	cpse	r3, r1
 35c:	32 c0       	rjmp	.+100    	; 0x3c2 <main+0x342>
			sbi(PORTD, Q3);		// Encender display 3, para mostrar la zona
 35e:	8b b1       	in	r24, 0x0b	; 11
 360:	88 60       	ori	r24, 0x08	; 8
 362:	8b b9       	out	0x0b, r24	; 11
			cbi(PORTD, Q2);		// Apagar displays 1 y 2
 364:	8b b1       	in	r24, 0x0b	; 11
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	8b b9       	out	0x0b, r24	; 11
			cbi(PORTD, Q1);
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8d 7f       	andi	r24, 0xFD	; 253
 36e:	8b b9       	out	0x0b, r24	; 11
			if(Z1detecta) PORTB = 1;
 370:	2d 85       	ldd	r18, Y+13	; 0x0d
 372:	3e 85       	ldd	r19, Y+14	; 0x0e
 374:	23 2b       	or	r18, r19
 376:	11 f0       	breq	.+4      	; 0x37c <main+0x2fc>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	85 b9       	out	0x05, r24	; 5
			if(Z2detecta) PORTB = 2;
 37c:	30 97       	sbiw	r30, 0x00	; 0
 37e:	11 f0       	breq	.+4      	; 0x384 <main+0x304>
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	85 b9       	out	0x05, r24	; 5
			if(Z3detecta) PORTB = 3;
 384:	69 81       	ldd	r22, Y+1	; 0x01
 386:	7a 81       	ldd	r23, Y+2	; 0x02
 388:	67 2b       	or	r22, r23
 38a:	11 f0       	breq	.+4      	; 0x390 <main+0x310>
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	85 b9       	out	0x05, r24	; 5
			if(!Z1detecta & !Z2detecta & !Z3detecta) cbi(PORTD, Q3);
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	2d 85       	ldd	r18, Y+13	; 0x0d
 394:	3e 85       	ldd	r19, Y+14	; 0x0e
 396:	23 2b       	or	r18, r19
 398:	09 f0       	breq	.+2      	; 0x39c <main+0x31c>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	ef 2b       	or	r30, r31
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <main+0x324>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	89 23       	and	r24, r25
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	69 81       	ldd	r22, Y+1	; 0x01
 3aa:	7a 81       	ldd	r23, Y+2	; 0x02
 3ac:	67 2b       	or	r22, r23
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0x332>
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	88 23       	and	r24, r24
 3b4:	49 f0       	breq	.+18     	; 0x3c8 <main+0x348>
 3b6:	99 23       	and	r25, r25
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <main+0x348>
 3ba:	8b b1       	in	r24, 0x0b	; 11
 3bc:	87 7f       	andi	r24, 0xF7	; 247
 3be:	8b b9       	out	0x0b, r24	; 11
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <main+0x348>
		} else {
			cbi(PORTD, Q3);
 3c2:	8b b1       	in	r24, 0x0b	; 11
 3c4:	87 7f       	andi	r24, 0xF7	; 247
 3c6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	8f e3       	ldi	r24, 0x3F	; 63
 3ca:	9c e9       	ldi	r25, 0x9C	; 156
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x34c>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x352>
 3d2:	00 00       	nop
		if(!BP1_act && !BP1_ant && flag_BP1){
			alarmaActivada = !alarmaActivada;
			cont = 0;
			flag_BP1 = 0;
		}
		BP1_ant = BP1_act;
 3d4:	b6 01       	movw	r22, r12
				Z3detecta = 1;
			}
		} else {
			Z3detecta = 0;
		}
		BZ3_ant = BZ3_act;
 3d6:	9a 01       	movw	r18, r20
				flag_BZ2 = 0;	
			}
		} else {
			Z2detecta = 0;
		}
		BZ2_ant = BZ2_act;
 3d8:	c7 01       	movw	r24, r14
			Z1detecta = 1;
		} else {
			cont = 15000;
			Z1detecta = 0;
		}
		BZ1_ant = BZ1_act;
 3da:	f8 01       	movw	r30, r16
 3dc:	80 ce       	rjmp	.-768    	; 0xde <main+0x5e>

000003de <__umulhisi3>:
 3de:	a2 9f       	mul	r26, r18
 3e0:	b0 01       	movw	r22, r0
 3e2:	b3 9f       	mul	r27, r19
 3e4:	c0 01       	movw	r24, r0
 3e6:	a3 9f       	mul	r26, r19
 3e8:	70 0d       	add	r23, r0
 3ea:	81 1d       	adc	r24, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	91 1d       	adc	r25, r1
 3f0:	b2 9f       	mul	r27, r18
 3f2:	70 0d       	add	r23, r0
 3f4:	81 1d       	adc	r24, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	91 1d       	adc	r25, r1
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
